"use client";
import { getDeliveryPrice } from "@/lib/getDeliveryPrice";
import { Button } from "../shadcn-ui/button";
import { FormInput } from "../shared/FormInput";
import { FormTextarea } from "./FormTextarea";
import { cn } from "@/lib";
import { useMemo } from "react";
import { useDeliveryStore } from "@/store/useDeliveryStore";
import { useFormContext } from "react-hook-form";
import { toast } from "sonner";

interface Props {
  className?: string;
}

export const DeliveryForm: React.FC<Props> = ({ className }) => {
  const { setDeliveryPrice, deliveryPrice } = useDeliveryStore();
  const { watch } = useFormContext();

  const city = watch("city");
  const street = watch("street");
  const building = watch("building");
  const porch = watch("porch");
  const sfloor = watch("sfloor");
  const sflat = watch("sflat");

  const isAllFieldsFilled = useMemo(() => {
    return city && street && building && porch && sfloor && sflat;
  }, [city, street, building, porch, sfloor, sflat]);

  const handleGetDeliveryPrice = async () => {
    const deliveryData = await getDeliveryPrice({
      city: city,
      street: street,
      building: building,
      porch: porch,
      sfloor: sfloor,
      sflat: sflat,
    });

    if (deliveryData) {
      const deliveryPrice = Number(deliveryData.price.total_price);
      toast.success(`–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –≤–∞—Å: ${deliveryPrice} ‚ÇΩ`, {
        position: "top-center",
      });
      setDeliveryPrice(deliveryPrice);
    } else {
      toast.error(
        "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏ üòì, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
        { position: "top-center" }
      );
    }
  };

  const handleResetAddress = () => {
    setDeliveryPrice(0);
    toast.info("–ê–¥—Ä–µ—Å —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.", {
      position: "top-center",
    });
  };

  return (
    <div className={cn("mb-4", className)}>
      <h2 className="text-lg font-semibold pb-3">–ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
      <div className="space-y-2">
        {/* –ì–æ—Ä–æ–¥ */}
        <FormInput
          placeholder="–ì–æ—Ä–æ–¥ (–°–ü–± –∏ –õ–û)"
          name="city"
          defaultValue="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
          disabled={!!deliveryPrice}
        />

        {/* –£–ª–∏—Ü–∞ */}
        <FormInput
          placeholder="–£–ª–∏—Ü–∞"
          name="street"
          disabled={!!deliveryPrice}
        />

        {/* –ù–æ–º–µ—Ä –∑–¥–∞–Ω–∏—è */}
        <FormInput
          placeholder="–î–æ–º"
          name="building"
          disabled={!!deliveryPrice}
        />

        {/* –ü–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞ */}
        <div className="grid grid-cols-3 gap-4">
          <FormInput
            placeholder="–ü–æ–¥—ä–µ–∑–¥"
            name="porch"
            type="number"
            disabled={!!deliveryPrice}
          />
          <FormInput
            placeholder="–≠—Ç–∞–∂"
            name="sfloor"
            type="number"
            disabled={!!deliveryPrice}
          />
          <FormInput
            placeholder="–ö–≤–∞—Ä—Ç–∏—Ä–∞"
            name="sflat"
            type="number"
            disabled={!!deliveryPrice}
          />
        </div>

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
        <FormTextarea
          placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (–µ—Å–ª–∏ —É –í–∞—Å —á–∞—Å—Ç–Ω—ã–π –¥–æ–º, —Ç–æ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –∑–¥–µ—Å—å)"
          name="comment"
          disabled={!!deliveryPrice}
        />

        {/* –ö–Ω–æ–ø–∫–∞ */}
        {deliveryPrice ? (
          <Button
            className="rounded-lg"
            type="button"
            onClick={handleResetAddress}
          >
            –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
          </Button>
        ) : (
          <Button
            className="rounded-lg"
            type="button"
            onClick={handleGetDeliveryPrice}
            disabled={!isAllFieldsFilled}
          >
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
          </Button>
        )}
      </div>
    </div>
  );
};
